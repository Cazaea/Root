apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "i.am.lucky"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.appVersionCode
        versionName rootProject.appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        // Used for intensive computing,
        // especially image processing, computer graphics,
        // computer vision, allowing developers to implement complex and superior applications with less code.
        // Developers can concentrate on writing processing algorithms without having to worry about scheduling and load balancing issues
        renderscriptTargetApi rootProject.minSdkVersion
        renderscriptSupportModeEnabled true
        // Dex breaks through the limit of 65535
        multiDexEnabled true
        ndk {
            // Select the corresponding library of the corresponding cpu type to be added
            abiFilters 'armeabi-v7a', "x86"
        }
    }
    buildTypes {
        debug {
            // Beta: Add .debug to the package name
            applicationIdSuffix ".debug"
            jniDebuggable true
            // Custom app name
            manifestPlaceholders = [
                    app_name: "测试"
            ]
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [
                    app_name: "正式"
            ]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Apply DataBinding
    dataBinding {
        enabled = true
    }

    // https://github.com/ReactiveX/RxJava/issues/4445
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    // Custom app output name
    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "Test_${variant.versionName}.${buildTime()}_${variant.name}.apk"
        }
    }

    // Exclude unwanted files to prevent library file build conflicts
    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

/**
 * App dependencies
 */
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // Test
    testImplementation "junit:junit:$rootProject.junitVersion"
    androidTestImplementation "com.android.support.test:runner:$rootProject.androidTestVersion"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$rootProject.androidEspressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    // Package
    implementation project(path: ':library:http')
    implementation project(path: ':library:zoom')
    implementation project(path: ':library:recycler')
    // Android Support
    implementation "com.android.support:design:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-v13:$rootProject.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"
    // Room
    implementation "android.arch.persistence.room:runtime:$rootProject.roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$rootProject.roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$rootProject.roomVersion"
    implementation "android.arch.paging:runtime:$rootProject.runtimeVersion"
    // Lifecycle
    //    implementation "android.arch.lifecycle:common-java8:1.0.0"
    implementation "android.arch.lifecycle:extensions:$rootProject.lifecycleVersion"
    implementation "android.arch.lifecycle:reactivestreams:$rootProject.lifecycleVersion"
    // Zxing
    implementation "com.google.zxing:core:$rootProject.zxingVersion"
    // 用于FlowAble的rxJava
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rxJavaVersion"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rxAndroidVersion"

    // Android library for using the Honeycomb animation API on all versions of the platform back to 1.0!
    implementation "com.nineoldandroids:library:2.4.0"
    // Glide
    implementation "jp.wasabeef:glide-transformations:$rootProject.glideVersion"
    // Banner
    implementation "com.youth.banner:banner:$rootProject.bannerVersion"
    // SliderMenu
    implementation "com.daimajia.slider:library:$rootProject.sliderVersion"
    // BottomSheet
    implementation "com.cocosw:bottomsheet:$rootProject.bottomVersion"
    // Multidex
    implementation "com.android.support:multidex:$rootProject.multidexVersion"
    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakCanaryVersion"

    // Bugly
    // implementation 'com.tencent.bugly:crashrepor_upgradet:1.3.5'
    implementation "com.tencent.bugly:crashreport:$rootProject.buglyCrashVersion"
    implementation "com.tencent.bugly:nativecrashreport:$rootProject.buglyNativeVersion"

    // Pulldown refresh pullup loading
    implementation "com.scwang.smartrefresh:SmartRefreshLayout:$rootProject.refreshVersion"
    // Support Special Header
    implementation "com.scwang.smartrefresh:SmartRefreshHeader:$rootProject.refreshVersion"

    // ping++, 必须添加
    implementation "com.pingxx:pingpp-core:$rootProject.pingxxVersion"
    // 使用支付宝时添加
    implementation "com.pingxx:pingpp-alipay:$rootProject.pingxxVersion"
    // 使用银联支付时添加
    implementation "com.pingxx:pingpp-upacp:$rootProject.pingxxVersion"
    // 使用QQ钱包时添加
    implementation "com.pingxx:pingpp-qpay:$rootProject.pingxxVersion"
    // 使用招行一网通时添加
    implementation "com.pingxx:pingpp-cmbwallet:$rootProject.pingxxVersion"
    // 使用微信支付时添加,具体版本参考微信官方文档
    implementation "com.tencent.mm.opensdk:wechat-sdk-android-without-mta:$rootProject.wechatSdkVersion"

}

// 打包日期(当前时间是UTC时区，以171010格式化时间输出)
static def buildTime() {
    return new Date().format("yyMMdd", TimeZone.getTimeZone("UTC"))
}
